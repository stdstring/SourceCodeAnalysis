<?xml version="1.0" encoding="utf-8" ?>
<porter>
    <!-- Includes -->
    
        <!-- If this option is enable porter will be use home directory while resolving any path.
             Should be enabled before import default config. Otherwise import of default porter.config might be failed. -->
        <opt name="use_porter_home_directory_while_resolving_path" value="false"/>
        
        <!-- relative to porter working dir -->
        <!--import config="default/porter.types.config"/>
        <import config="default/porter.lib_aspose_drawing_skia.config"/>
        <import config="default/porter.lib_aspose_xml_libxml2.config"/>
        <import config="default/porter.lib_aspose_security_botan.config"/>
        <import config="default/porter.lib_aspose_data.config"/>
        <import config="default/porter.lib_aspose_net.config"/>
        <import config="default/porter.lib_porter_interface.config"/>
        <import config="default/aspose_zip.config"/>
        <import config="default/porter.restricted_tokens.config"/-->
        
        <!--import config="import/Pals.config"/-->
    <!-- /Includes -->
    <!-- Locations -->
        <!-- Uncomment if you want to set the parameters there instead of passing them through the command line -->
        <!-- <csproj path="path\to\project.csproj" cfg="Debug"/> -->
        <!-- <outdir path="path\to\output_directory"/> -->
        <!-- <cppproj name="output_project_name"/> -->
    <!-- /Locations -->
    <!-- Sources -->
        <additional_source>
            <!-- Copy cpp files from this directory. Path must be relative to config or absolute. -->
            <!-- <copy dir="path\to\additional\external\directory"/> --> 
        </additional_source>
        <cut_namespaces>
            <exclude file="*"/> 
        </cut_namespaces>
        <attribute name="CppSkipEntity" interface="System.Collections.Generic.IComparer" method="System.Int32 Compare(System.Object, System.Object)"/>
        <attribute name="CppConstMethod" interface="System.Collections.Generic.IComparer" method="System.Int32 Compare(0, 0)"/>
        <attribute name="CppSkipEntity" interface="System.Collections.Generic.IEnumerator" get="System.Object Current()"/>
        <attribute name="CppSkipEntity" interface="System.Collections.Generic.IEnumerable" method="System.Collections.IEnumerator GetEnumerator()"/>
        <attribute name="CppConstMethod" interface="System.Collections.Generic.IEnumerator" get="0 Current()"/>
        <attribute name="CppSkipEntity" interface="System.IComparable" method="System.Int32 CompareTo(System.Object)"/>
        <attribute name="CppConstMethod" interface="System.Object" method="System.String ToString()"/>
        <attribute name="CppConstMethod" interface="System.Object" method="System.Int32 GetHashCode()"/>
        <attribute name="CppConstMethod" interface="Aspose.Crypto.BigInteger" method="System.String ToString(System.UInt32)"/>
        <attribute name="CppConstMethod" interface="Aspose.Crypto.BigInteger" method="System.String ToString(System.UInt32, System.String)"/>
        <attribute name="CppConstMethod" interface="Aspose.Collections.SortedShortListIntegerFallback" get="public System.Int32 Count()"/>
        <attribute name="CppConstMethod" interface="Aspose.Collections.SortedShortListIntegerFallback" method="public System.Boolean Contains(System.Int32)"/>
        <attribute name="CppConstMethod" interface="Aspose.Collections.SortedShortListIntegerFallback" method="public System.Boolean ContainsKey(System.Int32)"/>
        <attribute name="CppConstMethod" interface="Aspose.Collections.SortedShortListIntegerFallback" method="public System.Boolean ContainsAnyKey(System.Int32[])"/>
        <attribute name="CppConstMethod" interface="Aspose.Collections.SortedShortListIntegerFallback" method="public System.Object GetByIndex(System.Int32)"/>
        <attribute name="CppConstMethod" interface="Aspose.Collections.SortedShortListIntegerFallback" method="public System.Int32 GetKey(System.Int32)"/>
        <attribute name="CppConstMethod" interface="Aspose.Collections.SortedShortListIntegerFallback" method="public System.Int32 IndexOfKey(System.Int32)"/>
        <attribute name="CppConstMethod" interface="Aspose.Words.Node" get="public Aspose.Words.NodeType NodeType()"/>
    <!-- /Sources -->
    <libs>
        <!-- Libraries, both C# and C++, and their parameters -->
        <!-- Assemblies to import symbols from -->
        <!--
        <references>
            <assembly name="Assembly.Name" path="path\to\assembly.dll"/>
        </references>
        -->
        <!-- Applies token restriction rules to external assemblies as well -->
        <!-- <assembly_with_restricted_tokens>Assembly.Name</assembly_with_restricted_tokens> -->
        <!-- absolute or relative to porter work dir -->
        <opt name="gtest_path" value="%DYNABIC_PORTER_ROOT%/external/gtest-1.7.0"/>
        <opt name="cpp_lib_path" value="%DYNABIC_PORTER_ROOT%"/>
        <opt name="include_templates" value="include"/>
        <opt name="source_templates" value="source"/>
        <opt name="additional_defines" value="CPLUSPLUS;CPP_MVP" csonly="true"/>
        <!-- Indicates for which returned assembly current project will be used.
             I.e for executing_assembly Assembly.GetExecutingAssembly() 
             will be used to access assembly name resources etc. -->
        <!-- <opt name="add_assembly_details" value="executing_assembly"/> -->
        <!-- <opt name="add_assembly_details" value="entry_assembly"/> -->
        <!-- <opt name="add_assembly_details" value="calling_assembly"/> -->
    </libs>
    <!-- Code control -->
        <!-- Replace tokens, write notes to include_map.config. Sample: asposecpplib\tests\porter\TokenTest -->
        <!-- <restricted_tokens mask="file\mask\*"> -->
            <!-- <token from="OneIdentifier" to="Anotheridentifier"/> -->
        <!-- </restricted_tokens> -->
        <!-- stub:            true - generate stub methods, false - skip method definitios in cpp.
             only_public_api: true - generate only public types and fields, false - all types and fields. -->
        <!-- <skip_definitions stub="false" only_public_api="true"/> -->
        <!-- Implicit implementation of function - goes to the code instead of ported version -->
        <!-- <implementation type="MyNamespace.MyClass" entity="MyMethod">
            <![CDATA[
                return 2+2;
            ]]>
        </implemnetation> -->
        <!-- Copying C++ file to the ported project. Same as if the file was included into project directly. -->
        <!-- <implementation file="OriginalFileName.cpp" to="source"/> -->
        <nunit_categories>
            <!-- Enabling and disabling NUnit test categories to run -->
            <!-- <include name="Category1"/> -->
            <exclude name="CppBroken"/>
            <disable name="CppSlowTest"/>
        </nunit_categories> 
    <!-- /Code control -->
    <!-- Cmake parameters -->
        <!-- The list of cmake scripts to be copied to a target directory (if not present, the default set is being copied) -->
        <!-- Empty copy list -->
        <cmake_files>
        </cmake_files>
        <!-- Additional cmake commands 
        <cmake_commands>
        </cmake_commands>
        -->
        <!-- prevent write path to asposecpplib in the generated CMakeLists.txt file -->
        <opt name="do_not_hardcode_aspose_cpp_path" value="false"/>
    <!-- /Cmake parameters -->
    <!-- Options -->
        <!-- General -->
            <!-- Stop on porting error: true|(false) -->
            <opt name="abort_on_error" value="false"/>
            <!-- Messagees cutout level: (debug)|info|warning|error -->
            <opt name="log_level" value="debug"/>
            <!-- Write which file we're processing: true|(false) -->
            <opt name="write_progress" value="false"/>
        <!-- /General -->
        <style>
            <opt name="endl" value="\n"/>
            <opt name="tab" value="    "/>
            <opt name="write_bom" value="false"/>
            <opt name="version_compatibility_check_mode" value="none"/>
            <opt name="emplace_assembly_details" value="false"/>
            <!-- Don't overwrite unchanged files (ones with matching hashes): (true)|false -->
            <opt name="compare_cpp_hash" value="true"/>
            <!-- Use underscore word separators instead of camelcase when compiling filenames: true|(false) -->
            <opt name="low_case_file_names" value="false"/>
            <!-- Use hexademical values for non-ASCII symbols in string literals: true|(false) -->
            <opt name="replace_wchar_with_hex_literal" value="false"/>
            <!-- Put opening curve bracket on dedicated line: (true)|false -->
            <opt name="start_block_newline" value="true"/>
            <!-- Use pragma once instead of scope ifdefs: (true)|false -->
            <opt name="use_pragma_once" value="true"/>
            <!-- Whether to create include map to use when porting dependent project: (true)|false -->
            <opt name="write_include_map" value="true" public_only="false" with_dir_prefix="false"/>
        </style>
        <!-- Type subsystem -->
            <opt name="cast_delegate" value="true"/>
            <opt name="deprecate_system_base_type" value="false"/>
            <opt name="exception_as_reference" value="false"/>
            <opt name="external_object_methods" value="true"/>
            <opt name="forwarding_if_possible" value="true"/>
            <opt name="ignore_base_for_static_class" value="true"/>
            <opt name="use_full_base_name" value="true"/>
            <opt name="cpp_enum_enable_metadata" value="false"/>
            <opt name="force_public_headers" value="false" />
            <!-- Enumerable type replacement. It is needed if c++ type is different from c# -->
            <!-- <opt name="replace_enumerable_type" enumerable="System.Xml.XmlNodeList" type="System.Xml.XmlNode" value="true"/> -->
            <!-- Forces dynamic casts between types -->
            <!-- <opt name="force_dynamic_cast" from_type="A.B.ClassA" to_type="A.B.ClassB" value="true"/> -->
            <opt name="remove_redundant_base_interfaces" value="true"/>
            <!--
            <opt name="exclude_by_description">
                <text>This is for COM compatibility.</text>
                <text>For COM compatibility.</text>
            </opt>
            -->
        <!-- /Type subsystem -->
        <!-- Code generation -->
            <opt name="alternative_null_coalescing" value="false"/>
            <opt name="alternative_string_switch" value="false"/>
            <opt name="auto_ctor_self_reference" value="true"/>
            <opt name="create_unit_test_preprocessor_directive" value="false"/>
            <opt name="detect_const_methods" value="false"/>
            <opt name="exclude_volatile" value="false"/>
            <opt name="force_add_shared_api_macros" value="false"/>
            <opt name="generate_abstract_keyword" value="false"/>
            <opt name="insert_using_statement_guard" value="false"/>
            <opt name="put_enum_on_top" value="true"/>
            <opt name="remove_unused_namespaces" value="true"/>
            <opt name="use_weak_ptr_std_bind" value="false"/>
            <opt name="using_statement_as_lambda" value="false" /> 
            <opt name="finally_statement_as_lambda" value="true" /> 
            <opt name="allow_interface_members_base_class_impl" value="true" />
            <opt name="polymorphic_memberwiseclone" value="true">
                <root class="Aspose.Collections.SortedShortListIntegerFallback"/> 
            </opt>
            <opt name="setter_wrap_with_lambda" value="true" /> 
            <opt name="using_statement_enhanced" value="true" />
            <opt name="force_const_auto_property_getter" value="true"/>
            <opt name="force_const_simple_property_getter" value="true"/>
            <opt name="original_tests_names" value="false" />
            <!-- (None)|Tests|All -->
            <opt name="deferred_init" value="all"/>
            <!-- 'true' for idx_get()/idx_set(), 'false' for operator []. -->
            <opt name="indexer_as_method" value="true"/>
        <!-- /Code generation -->
        <!-- Debug and developer-only code generation modes options -->
            <opt name="cleanup_tests" value="false"/>
            <opt name="generate_for_each_member" value="false"/>
            <opt name="insert_leakage_detectors" value="false"/>
            <opt name="stable_gv_file" value="false"/>
            <opt name="test_run_stub_file" value=""/>
            <opt name="tests_garbage_collection" value="none"/>
            <opt name="tests_garbage_collection_generation" value="0"/>
            <!-- Collect ported NUnit test method names using System::TestToolsExt class -->
            <opt name="collect_test_methods" value="false"/>
            <!-- Add TEST_F() for base classes' tests -->
            <opt name="add_baseclasses_tests" value="true"/>
            <!-- (None)|Report|Delete -->
            <opt name="tests_garbage_collection" value="none"/>
            <!-- (0)|1|2 -->
            <opt name="tests_garbage_collection_generation" value="0"/>
        <!-- /Debug and developer-only code generation modes options -->
        <!-- Project settings -->
            <opt name="internal_as_public" value="true"/>
            <opt name="make_shared_lib" value="false" export_per_member="true"/>
            <!-- PortedProject|Tests|(Both) -->
            <opt name="cmake_targets" value="Both"/>
            <!-- Output directory for cpp files that are included into project -->
            <opt name="cpp_files_to" value="source"/>
            <!-- Path to alternative file with 'main' function for tests to replace the standard one with -->
            <!-- <opt name="custom_gtest_main" value="src/my_main.cpp"/> -->
            <!-- translate internal interface as public if it is base for public class -->
            <opt name="interface_as_public" value="true"/>
            <!-- Specific the version of tool that should be used while internal call of MSBuild.
                 Useful if project converted on machine with higher version of .NET Framework. 
                 If leave default value - version of tool will be selected from project
                 or used available if project do not specific such. -->
            <opt name="tools_version" value=""/>
            <!-- Specify global properties that should be used during internal call of MSBuild. -->
            <msbuild_global_properties>
                <!-- property name="TargetFramework" value="net20" -->
            </msbuild_global_properties>
            <!-- Specific the version of .NET Framework to build.
                 Useful if project converted on machine with higher version of .NET Framework. 
                 Success of version choice dependent to available versions
                 that located here "%ProgramFiles(x86)%\Reference Assemblies\Microsoft\Framework\.NETFramework\" -->
            <opt name="target_framework_version" value=""/>
            <!-- Keep documentation comments in generated code.
                 If need the tags: summary, param, returns, can be substituted on the cppsummary, cppparam, cppreturns. 
                 i.e. this tags has a higest priority, and on the output file it will generated with stadart names i.e. cppsummsry -> summary, e.t.c. -->
            <opt name="keep_documentation_comments" value="true"/> 
            <!-- ThreadStatic attribute, method generation
                 ThreadStatic attribute processing methods. Can be: 
                 disabled - Ignore attribute
                 native - genreate thread_local cpp keyword
                 singleton - generate as singleton (when need export from DLL) -->
            <opt name="thread_static_generation" value="native"/> 
            <opt name="foreach_as_range_based_for_loop" value="true"/>
            <opt name="nunit_assert_class_aliases" value="true">
                <alias class="Aspose.TestFx.AsposeAssert"/> 
            </opt>
        <!-- /Project settings -->
    <!-- /Options -->
    <!-- Generate macro for including class into Assembly::GetTypes() collection. -->
    <!-- assembly_types -->
    <!-- class name="" / -->
    <!-- /assembly_types -->
    <files>
        <exclude file="Include/*.cs" />
        <include file="Include/GoodCastsExample.cs" />
        <exclude file="Exclude/BadIdentifierExample.cs" />
        <include file="Exclude/GoodIdentifierExample.cs" />
        <only file="Only/GoodClassNameExample.cs" />
    </files>
</porter>
